{"version":3,"sources":["webpack://splitpanes/webpack/universalModuleDefinition","webpack://splitpanes/webpack/bootstrap","webpack://splitpanes/./src/components/splitpanes/splitpanes.vue?b842","webpack://splitpanes/./src/components/splitpanes/splitpanes.vue?61e1","webpack://splitpanes/./node_modules/current-script-polyfill/currentScript.js","webpack://splitpanes/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://splitpanes/src/components/splitpanes/splitpanes.vue","webpack://splitpanes/./src/components/splitpanes/splitpanes.vue?8fdd","webpack://splitpanes/./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack://splitpanes/./src/components/splitpanes/splitpanes.vue","webpack://splitpanes/./src/components/splitpanes/pane.js","webpack://splitpanes/./src/components/splitpanes/index.js","webpack://splitpanes/./node_modules/@vue/cli-service/lib/commands/build/entry-lib-no-default.js"],"names":["Number","String","undefined","sizeNumber","parseFloat","size","minSizeNumber","minSize","maxSizeNumber","maxSize","$parent","requestUpdate","min","max","update","style","render","h","$slots","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFA,uC;;;;;;;;ACAA;AAAA;AAAA;AAAihB,CAAgB,kiBAAG,EAAC,C;;;;;;;ACAriB;;AAEA;;AAEA;AACA;AACA,wDAAwD;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;;;;;;;;;;;ACnCD;;AAEA;AACA,MAAM,IAAuC;AAC7C,IAAI,mBAAO,CAAC,MAAyB;AACrC;;AAEA;AACA;AACA,IAAI,qBAAuB;AAC3B;AACA;;AAEA;AACe,sDAAI;;;;;;;;;;;;;;;;;;;;;;;;;ACbnB;AACA,oBADA;AAEA;AACA;AACA,mBADA;AAEA,qBAFA;AAGA;AAHA,KADA;AAMA;AACA,mBADA;AAEA,qBAFA;AAGA;AAHA,KANA;AAWA;AACA,mBADA;AAEA,qBAFA;AAGA;AAHA;AAXA,GAFA;AAmBA;AAAA;AACA,qBADA;AAEA,eAFA;AAGA;AACA,wBADA;AAEA,uBAFA;AAGA;AAHA,OAHA;AAQA;AACA;AACA,sBAFA;AAGA;AAHA;AARA;AAAA,GAnBA;AAiCA;AACA;AACA;AACA,gBAFA;AAGA,sBAHA;AAIA,aAJA,qBAIA;AACA;AACA;AANA,KADA;AASA,aATA,uBASA;AACA;AACA,KAXA;AAYA,oBAZA,4BAYA,MAZA,EAYA;AAAA;;AACA,yCACA,wDADA;;AAGA;AACA;AACA;AAAA;AAAA;AACA,SAFA;AAGA,OAJA,MAIA;AACA;AACA;AACA,SAFA;AAGA;AACA;AAzBA,GAjCA;AA4DA;AACA,oBADA,8BACA;AAAA;;AACA;AACA;AACA;AACA;AACA,wDACA,sCADA,YACA,SADA;AAGA,OAJA;AAKA,KAVA;AAWA,cAXA,wBAWA;AACA;AACA;AADA;AAGA,2DAJA,CAKA;;AACA;AACA;AACA;AADA;AAGA;AACA;AACA,KAvBA;AAwBA,gBAxBA,0BAwBA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,KA/BA;AAgCA,eAhCA,uBAgCA,KAhCA,EAgCA,aAhCA,EAgCA;AACA;AACA;AACA;AACA,KApCA;AAqCA,eArCA,uBAqCA,KArCA,EAqCA;AACA;AACA;AACA;AACA;AACA;AACA,mBACA,QADA,EAEA;AAAA;AACA,yBADA;AAEA,yBAFA;AAGA;AAHA;AAAA,UAFA;AAQA;AACA,KApDA;AAqDA,aArDA,uBAqDA;AAAA;;AACA;AACA,mBACA,SADA,EAEA;AAAA;AACA,yBADA;AAEA,yBAFA;AAGA;AAHA;AAAA,UAFA;AAQA;;AACA,mCAXA,CAYA;AACA;;AACA;AACA;;AACA;AACA,OAHA,EAGA,GAHA;AAIA,KAvEA;AAwEA;AACA,mBAzEA,2BAyEA,KAzEA,EAyEA,aAzEA,EAyEA;AAAA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,SAJA,MAIA;AACA;AACA;AACA;AACA,WAFA,EAEA,GAFA;AAGA;AACA;;AAEA;AACA;AACA;AACA,KA3FA;AA4FA;AACA,sBA7FA,8BA6FA,KA7FA,EA6FA,aA7FA,EA6FA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,OANA;AAOA;AACA;AACA,KAxGA;AAyGA,eAzGA,uBAyGA,KAzGA,EAyGA,SAzGA,EAyGA;AACA;AACA,KA3GA;AA4GA;AACA,uBA7GA,+BA6GA,KA7GA,EA6GA;AACA;;AADA,iBAGA,oEAHA;AAAA,UAEA,OAFA,QAEA,OAFA;AAAA,UAEA,OAFA,QAEA,OAFA;;AAIA;AACA,8BADA;AAEA;AAFA;AAIA,KArHA;AAsHA;AACA;AACA,4BAxHA,oCAwHA,IAxHA,EAwHA;AACA,+CADA,CAEA;;AACA,yCACA,gDADA;AAGA;AACA,KA/HA;AAgIA,sBAhIA,8BAgIA,IAhIA,EAgIA;AACA;AACA;AACA,2DADA;AAEA,2DAFA;AAGA,8BAHA;AAIA;AAJA;AAOA;AACA;AACA,oCACA,sDADA,EAEA,OAFA,EAXA,CAgBA;;AACA;AACA;AACA;AAEA,iCACA,wBACA,qDAFA;AAGA,gCACA,uBACA,kBACA,gEAHA,CAxBA,CA4BA;;AACA;AACA;AACA;AACA,oCACA,8DADA,EAEA,CAFA;AAIA,SANA,MAMA;AACA,qCACA,MACA,aADA,GAEA,kBAFA,GAGA,wCAJA,EAKA,CALA;AAOA;AACA;;AACA;AACA,OA/CA,CAiDA;;;AACA;AACA;;AACA;AACA,iBADA,CACA;AACA;;AACA,YALA,GAKA,IALA,CAKA,IALA;AAKA,qBALA,GAKA,IALA,CAKA,aALA;AAMA;AACA;AACA;;AAEA;AACA,mCACA,SACA,8DADA,EAEA,cAFA,CADA,EAKA,cALA;AAOA;;AACA;AACA,kCACA,SACA,MACA,cADA,GAEA,kBAFA,GAGA,wBAJA,EAKA,aALA,CADA,EAQA,aARA;AAUA;AACA,KAjNA;AAkNA,oBAlNA,4BAkNA,IAlNA,EAkNA,cAlNA,EAkNA;AAAA;;AACA;AACA,6DAFA,CAGA;AACA;;AACA,UACA,iBACA,qDAFA,EAGA;AACA;AAEA,qCAHA,CAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WALA;AAMA;;AACA,qEAbA,CAcA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WALA;AAMA,8CACA,MACA,wBADA,GAEA,iBAFA,GAGA,kBAHA,GAIA,kBALA;AAMA;AACA;AACA,OAxCA,CAyCA;AACA;;;AACA,UACA,iBACA,2DAFA,EAGA;AACA;AACA,qCAFA,CAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WALA;AAMA;;AACA,yEAZA,CAaA;;AACA;AACA;AACA,8DACA,qBADA,EAEA,GAFA;AAGA;AACA;AACA;AACA;AACA;AACA,WALA;AAMA,8CACA,MACA,kBADA,GAEA,wBAFA,GAGA,qCAHA,GAIA,kBALA;AAMA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA,KAnSA;AAoSA,oBApSA,4BAoSA,aApSA,EAoSA;AACA,+BACA;AAAA;AAAA,OADA,EAEA,CAFA;AAIA,KAzSA;AA0SA,oBA1SA,4BA0SA,aA1SA,EA0SA;AACA,+BACA;AAAA;AAAA,OADA,EAEA,CAFA;AAIA,KA/SA;AAgTA;AACA,wBAjTA,gCAiTA,aAjTA,EAiTA;AACA,gDACA,OADA,GAEA,IAFA,CAEA;AAAA;AAAA,OAFA;;AAGA;AACA,KAtTA;AAuTA;AACA,wBAxTA,gCAwTA,aAxTA,EAwTA;AACA,iCACA;AAAA;AAAA,OADA;AAGA;AACA,KA7TA;AA8TA;AACA,UA/TA,oBA+TA;AAAA;;AACA;AACA;AACA,yCAHA,CAIA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;;AACA;AACA;AAAA,uBACA,wCADA;AAAA;AAEA;;AACA;AAAA,qBACA,gDADA;AAAA;;AAEA;AACA;AAAA,uBACA,mDADA;AAAA;AAEA;;AACA;AACA,gCADA;AAEA,8BAFA;AAGA,4BAHA;AAIA;AACA;AAAA,oBACA,2CADA;AAGA;AACA;AACA,sCACA,2DADA;AAGA,iBALA;AAOA;AACA;AAhBA;AAkBA;AACA;;AAEA;AACA;;AACA,cACA,oEADA,EAEA;AACA;AACA;AACA,WAjDA,CAmDA;;;AACA;AACA;;AACA;AAAA;AAAA,YAtDA,CAwDA;;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,aAHA,MAGA;AACA;AACA;AACA;AACA,WAnEA,CAqEA;;;AACA;AACA,4BADA;AAEA,iBACA,oCACA,CADA,GAEA,6BALA;AAMA,iBACA,oCACA,GADA,GAEA,6BATA;AAUA;AAVA;AAYA,SAlFA,MAkFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;;AACA;AACA,gBACA,gDACA,yBAFA,EAGA;AACA;AACA;AACA,aAPA,CAQA;;;AACA;AACA;AACA;AACA,WAzBA,CA0BA;;;AACA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AACA;AAAA,qBACA,gDADA;AAAA;AAEA;AACA;AACA,OAtHA,EALA,CA6HA;;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,OAZA;;AAcA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAFA;AAGA;AACA,KAvdA;AAwdA;AACA,iBAzdA,gCAydA;AAAA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA,OAFA;AAGA;AA/dA,GA5DA;AA6hBA,SA7hBA,qBA6hBA;AACA;AACA,GA/hBA;AAgiBA,SAhiBA,qBAgiBA;AACA;AACA;AACA;AACA,GApiBA;AAqiBA,QAriBA,kBAqiBA,CAriBA,EAqiBA;AACA,aACA,KADA,EAEA;AACA,sBADA;AAEA,cACA,YADA,wBAEA,2CAFA,GAGA;AACA;AADA,OAHA;AAFA,KAFA,EAYA,mBAZA;AAcA;AApjBA,G;;ACDmV,CAAgB,oHAAG,EAAC,C;;;;;ACAvW;;AAEA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AC5FA;AAC8D;AACL;AACc;;;AAGvE;AAC6F;AAC7F,gBAAgB,kBAAU;AAC1B,EAAE,6CAAM;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,gE;;ACnBA;AACb,UAAQ,MADK;AAEb,WAAS;AACP,YAAQ;AACN,cAAQ,CAACA,MAAD,EAASC,MAAT,CADF;AAEN,kBAAY,KAFN;AAGN,iBAAWC;AAHL,KADD;AAMP,eAAW;AACT,cAAQ,CAACF,MAAD,EAASC,MAAT,CADC;AAET,kBAAY,KAFH;AAGT,iBAAW;AAHF,KANJ;AAWP,eAAW;AACT,cAAQ,CAACD,MAAD,EAASC,MAAT,CADC;AAET,kBAAY,KAFH;AAGT,iBAAW;AAHF;AAXJ,GAFI;AAmBb,UAAQ;AAAA,WAAO;AACb,eAAS;AADI,KAAP;AAAA,GAnBK;AAsBb,cAAY;AACVE,cADU,wBACI;AACZ,aAAOC,UAAU,CAAC,KAAKC,IAAN,CAAjB;AACD,KAHS;AAIVC,iBAJU,2BAIO;AACf,aAAOF,UAAU,CAAC,KAAKG,OAAN,CAAjB;AACD,KANS;AAOVC,iBAPU,2BAOO;AACf,aAAOJ,UAAU,CAAC,KAAKK,OAAN,CAAjB;AACD;AATS,GAtBC;AAiCb,WAAS;AACPN,cADO,sBACKE,IADL,EACW;AAChB,WAAKK,OAAL,CAAaC,aAAb,CAA2B;AACzB,kBAAU,IADe;AAEzBN,YAAI,EAAJA;AAFyB,OAA3B;AAID,KANM;AAOPC,iBAPO,yBAOQM,GAPR,EAOa;AAClB,WAAKF,OAAL,CAAaC,aAAb,CAA2B;AACzB,kBAAU,IADe;AAEzBC,WAAG,EAAHA;AAFyB,OAA3B;AAID,KAZM;AAaPJ,iBAbO,yBAaQK,GAbR,EAaa;AAClB,WAAKH,OAAL,CAAaC,aAAb,CAA2B;AACzB,kBAAU,IADe;AAEzBE,WAAG,EAAHA;AAFyB,OAA3B;AAID;AAlBM,GAjCI;AAqDb,aAAW;AACTC,UADS,kBACDC,KADC,EACM;AACb,WAAKA,KAAL,GAAaA,KAAb;AACD;AAHQ,GArDE;AA0DbC,QA1Da,kBA0DLC,CA1DK,EA0DF;AACT,WAAOA,CAAC,CACN,KADM,EAEN;AACE,eAAS,CAAC,kBAAD,CADX;AAEE,eAAS,KAAKF;AAFhB,KAFM,EAMN,KAAKG,MAAL,CAAYC,OANN,CAAR;AAQD;AAnEY,CAAf,E;;ACAA;AACA;;;ACDA;AAAA;AAAwB;AACF","file":"splitpanes.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"splitpanes\"] = factory();\n\telse\n\t\troot[\"splitpanes\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fae3\");\n","// extracted by mini-css-extract-plugin","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./splitpanes.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./splitpanes.vue?vue&type=style&index=0&lang=scss&\"","// document.currentScript polyfill by Adam Miller\n\n// MIT license\n\n(function(document){\n  var currentScript = \"currentScript\",\n      scripts = document.getElementsByTagName('script'); // Live NodeList collection\n\n  // If browser needs currentScript polyfill, add get currentScript() to the document object\n  if (!(currentScript in document)) {\n    Object.defineProperty(document, currentScript, {\n      get: function(){\n\n        // IE 6-10 supports script readyState\n        // IE 10+ support stack trace\n        try { throw new Error(); }\n        catch (err) {\n\n          // Find the second match for the \"at\" string to get file src url from stack.\n          // Specifically works with the format of stack traces in IE.\n          var i, res = ((/.*at [^\\(]*\\((.*):.+:.+\\)$/ig).exec(err.stack) || [false])[1];\n\n          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag\n          for(i in scripts){\n            if(scripts[i].src == res || scripts[i].readyState == \"interactive\"){\n              return scripts[i];\n            }\n          }\n\n          // If no match, return null\n          return null;\n        }\n      }\n    });\n  }\n})(document);\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    require('current-script-polyfill')\n  }\n\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","<script>\r\nexport default {\r\n  name: \"splitpanes\",\r\n  props: {\r\n    horizontal: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    pushOtherPanes: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true\r\n    },\r\n    dblClickSplitter: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true\r\n    }\r\n  },\r\n  data: () => ({\r\n    container: null,\r\n    panes: [],\r\n    touch: {\r\n      mouseDown: false,\r\n      dragging: false,\r\n      activeSplitter: null\r\n    },\r\n    splitterTaps: {\r\n      // Used to detect double click on touch devices.\r\n      splitter: null,\r\n      timeoutId: null\r\n    }\r\n  }),\r\n  watch: {\r\n    panes: {\r\n      // Every time a pane is updated, update the panes accordingly.\r\n      deep: true,\r\n      immediate: false,\r\n      handler() {\r\n        this.updatePanesStyle();\r\n      }\r\n    },\r\n    direction() {\r\n      this.updatePanesStyle();\r\n    },\r\n    dblClickSplitter(enable) {\r\n      const splitters = [\r\n        ...this.container.querySelectorAll(\".splitpanes__splitter\")\r\n      ];\r\n      if (enable) {\r\n        splitters.forEach((splitter, index) => {\r\n          splitter.ondblclick = event => this.onSplitterDblClick(event, index);\r\n        });\r\n      } else {\r\n        splitters.forEach(splitter => {\r\n          splitter.ondblclick = undefined;\r\n        });\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    updatePanesStyle() {\r\n      // Using `this.$children` here rather than `this.$slots.default` because the latter is sometimes not initialized yet (eg. when this method is called\r\n      // whereas the component is not mounted yet).\r\n      const children = this.$children;\r\n      this.panes.forEach(pane => {\r\n        children[pane.index].update({\r\n          [this.horizontal ? \"height\" : \"width\"]: `${pane.size}%`\r\n        });\r\n      });\r\n    },\r\n    bindEvents() {\r\n      document.addEventListener(\"mousemove\", this.onMouseMove, {\r\n        passive: false\r\n      });\r\n      document.addEventListener(\"mouseup\", this.onMouseUp);\r\n      // Passive: false to prevent scrolling while touch dragging.\r\n      if (\"ontouchstart\" in window) {\r\n        document.addEventListener(\"touchmove\", this.onMouseMove, {\r\n          passive: false\r\n        });\r\n        document.addEventListener(\"touchend\", this.onMouseUp);\r\n      }\r\n    },\r\n    unbindEvents() {\r\n      document.removeEventListener(\"mousemove\", this.onMouseMove);\r\n      document.removeEventListener(\"mouseup\", this.onMouseUp);\r\n      if (\"ontouchstart\" in window) {\r\n        document.removeEventListener(\"touchmove\", this.onMouseMove);\r\n        document.removeEventListener(\"touchend\", this.onMouseUp);\r\n      }\r\n    },\r\n    onMouseDown(event, splitterIndex) {\r\n      this.bindEvents();\r\n      this.touch.mouseDown = true;\r\n      this.touch.activeSplitter = splitterIndex;\r\n    },\r\n    onMouseMove(event) {\r\n      if (this.touch.mouseDown) {\r\n        // Prevent scrolling while touch dragging (only works with an active event, eg. passive: false).\r\n        event.preventDefault();\r\n        this.touch.dragging = true;\r\n        this.calculatePanesSize(this.getCurrentMouseDrag(event));\r\n        this.$emit(\r\n          \"resize\",\r\n          this.panes.map(pane => ({\r\n            min: pane.min,\r\n            max: pane.max,\r\n            size: pane.size\r\n          }))\r\n        );\r\n      }\r\n    },\r\n    onMouseUp() {\r\n      if (this.touch.dragging) {\r\n        this.$emit(\r\n          \"resized\",\r\n          this.panes.map(pane => ({\r\n            min: pane.min,\r\n            max: pane.max,\r\n            size: pane.size\r\n          }))\r\n        );\r\n      }\r\n      this.touch.mouseDown = false;\r\n      // Keep dragging flag until click event is finished (click happens immediately after mouseup)\r\n      // in order to prevent emitting `splitter-click` event if splitter was dragged.\r\n      setTimeout(() => {\r\n        this.touch.dragging = false;\r\n        this.unbindEvents();\r\n      }, 100);\r\n    },\r\n    // If touch device, detect double tap manually (2 taps separated by less than 500ms).\r\n    onSplitterClick(event, splitterIndex) {\r\n      if (\"ontouchstart\" in window) {\r\n        event.preventDefault();\r\n        if (this.splitterTaps.splitter === splitterIndex) {\r\n          clearTimeout(this.spltterTaps.timeoutId);\r\n          this.splitterTaps.timeoutId = null;\r\n          this.onSplitterDblClick(event, splitterIndex);\r\n        } else {\r\n          this.splitterTaps.splitter = splitterIndex;\r\n          this.splitterTaps.timeoutId = setTimeout(() => {\r\n            this.splitterTaps.splitter = null;\r\n          }, 500);\r\n        }\r\n      }\r\n\r\n      if (!this.touch.dragging) {\r\n        this.$emit(\"splitter-click\", this.panes[splitterIndex]);\r\n      }\r\n    },\r\n    // On splitter dbl click or dbl tap maximize this pane.\r\n    onSplitterDblClick(event, splitterIndex) {\r\n      let totalMinSizes = 0;\r\n      this.panes = this.panes.map((pane, i) => {\r\n        pane.size = i === splitterIndex ? pane.max : pane.min;\r\n        if (i !== splitterIndex) {\r\n          totalMinSizes += pane.min;\r\n        }\r\n        return pane;\r\n      });\r\n      this.panes[splitterIndex].size -= totalMinSizes;\r\n      this.$emit(\"pane-maximize\", this.panes[splitterIndex]);\r\n    },\r\n    onPaneClick(event, paneIndex) {\r\n      this.$emit(\"pane-click\", this.panes[paneIndex]);\r\n    },\r\n    // Get the cursor position relative to the splitpane container.\r\n    getCurrentMouseDrag(event) {\r\n      const rect = this.container.getBoundingClientRect();\r\n      const { clientX, clientY } =\r\n        \"ontouchstart\" in window && event.touches ? event.touches[0] : event;\r\n      return {\r\n        x: clientX - rect.left,\r\n        y: clientY - rect.top\r\n      };\r\n    },\r\n    // Returns the drag percentage of the splitter relative to the 2 panes it's inbetween.\r\n    // if the sum of size of the 2 cells is 60%, the dragPercentage range will be 0 to 100% of this 60%.\r\n    getCurrentDragPercentage(drag) {\r\n      drag = drag[this.horizontal ? \"y\" : \"x\"];\r\n      // In the code bellow 'size' refers to 'width' for vertical and 'height' for horizontal layout.\r\n      const containerSize = this.container[\r\n        this.horizontal ? \"clientHeight\" : \"clientWidth\"\r\n      ];\r\n      return (drag * 100) / containerSize;\r\n    },\r\n    calculatePanesSize(drag) {\r\n      const splitterIndex = this.touch.activeSplitter;\r\n      let sums = {\r\n        prevPanesSize: this.sumPrevPanesSize(splitterIndex),\r\n        nextPanesSize: this.sumNextPanesSize(splitterIndex),\r\n        prevReachedMinPanes: 0,\r\n        nextReachedMinPanes: 0\r\n      };\r\n\r\n      const minDrag = 0 + (this.pushOtherPanes ? 0 : sums.prevPanesSize);\r\n      const maxDrag = 100 - (this.pushOtherPanes ? 0 : sums.nextPanesSize);\r\n      const dragPercentage = Math.max(\r\n        Math.min(this.getCurrentDragPercentage(drag), maxDrag),\r\n        minDrag\r\n      );\r\n\r\n      // If not pushing other panes, panes to resize are right before and right after splitter.\r\n      let panesToResize = [splitterIndex, splitterIndex + 1];\r\n      let paneBefore = this.panes[panesToResize[0]] || null;\r\n      let paneAfter = this.panes[panesToResize[1]] || null;\r\n\r\n      const paneBeforeMaxReached =\r\n        paneBefore.max < 100 &&\r\n        dragPercentage >= paneBefore.max + sums.prevPanesSize;\r\n      const paneAfterMaxReached =\r\n        paneAfter.max < 100 &&\r\n        dragPercentage <=\r\n          100 - (paneAfter.max + this.sumNextPanesSize(splitterIndex + 1));\r\n      // Prevent dragging beyond pane max.\r\n      if (paneBeforeMaxReached || paneAfterMaxReached) {\r\n        if (paneBeforeMaxReached) {\r\n          paneBefore.size = paneBefore.max;\r\n          paneAfter.size = Math.max(\r\n            100 - paneBefore.max - sums.prevPanesSize - sums.nextPanesSize,\r\n            0\r\n          );\r\n        } else {\r\n          paneBefore.size = Math.max(\r\n            100 -\r\n              paneAfter.max -\r\n              sums.prevPanesSize -\r\n              this.sumNextPanesSize(splitterIndex + 1),\r\n            0\r\n          );\r\n          paneAfter.size = paneAfter.max;\r\n        }\r\n        return;\r\n      }\r\n\r\n      // When pushOtherPanes = true, find the closest expanded pane on each side of the splitter.\r\n      if (this.pushOtherPanes) {\r\n        const vars = this.doPushOtherPanes(sums, dragPercentage);\r\n        if (!vars) {\r\n          return; // Prevent other calculation.\r\n        }\r\n        ({ sums, panesToResize } = vars);\r\n        paneBefore = this.panes[panesToResize[0]] || null;\r\n        paneAfter = this.panes[panesToResize[1]] || null;\r\n      }\r\n\r\n      if (paneBefore !== null) {\r\n        paneBefore.size = Math.min(\r\n          Math.max(\r\n            dragPercentage - sums.prevPanesSize - sums.prevReachedMinPanes,\r\n            paneBefore.min\r\n          ),\r\n          paneBefore.max\r\n        );\r\n      }\r\n      if (paneAfter !== null) {\r\n        paneAfter.size = Math.min(\r\n          Math.max(\r\n            100 -\r\n              dragPercentage -\r\n              sums.nextPanesSize -\r\n              sums.nextReachedMinPanes,\r\n            paneAfter.min\r\n          ),\r\n          paneAfter.max\r\n        );\r\n      }\r\n    },\r\n    doPushOtherPanes(sums, dragPercentage) {\r\n      const splitterIndex = this.touch.activeSplitter;\r\n      const panesToResize = [splitterIndex, splitterIndex + 1];\r\n      // Pushing Down.\r\n      // Going smaller than the current pane min size: take the previous expanded pane.\r\n      if (\r\n        dragPercentage <\r\n        sums.prevPanesSize + this.panes[panesToResize[0]].min\r\n      ) {\r\n        panesToResize[0] = this.findPrevExpandedPane(splitterIndex).index;\r\n\r\n        sums.prevReachedMinPanes = 0;\r\n        // If pushing a n-2 or less pane, from splitter, then make sure all in between is at min size.\r\n        if (panesToResize[0] < splitterIndex) {\r\n          this.panes.forEach((pane, i) => {\r\n            if (i > panesToResize[0] && i <= splitterIndex) {\r\n              pane.size = pane.min;\r\n              sums.prevReachedMinPanes += pane.min;\r\n            }\r\n          });\r\n        }\r\n        sums.prevPanesSize = this.sumPrevPanesSize(panesToResize[0]);\r\n        // If nothing else to push down, cancel dragging.\r\n        if (panesToResize[0] === undefined) {\r\n          sums.prevReachedMinPanes = 0;\r\n          this.panes[0].size = this.panes[0].min;\r\n          this.panes.forEach((pane, i) => {\r\n            if (i > 0 && i <= splitterIndex) {\r\n              pane.size = pane.min;\r\n              sums.prevReachedMinPanes += pane.min;\r\n            }\r\n          });\r\n          this.panes[panesToResize[1]].size =\r\n            100 -\r\n            sums.prevReachedMinPanes -\r\n            this.panes[0].min -\r\n            sums.prevPanesSize -\r\n            sums.nextPanesSize;\r\n          return null;\r\n        }\r\n      }\r\n      // Pushing Up.\r\n      // Pushing up beyond min size is reached: take the next expanded pane.\r\n      if (\r\n        dragPercentage >\r\n        100 - sums.nextPanesSize - this.panes[panesToResize[1]].min\r\n      ) {\r\n        panesToResize[1] = this.findNextExpandedPane(splitterIndex).index;\r\n        sums.nextReachedMinPanes = 0;\r\n        // If pushing a n+2 or more pane, from splitter, then make sure all in between is at min size.\r\n        if (panesToResize[1] > splitterIndex + 1) {\r\n          this.panes.forEach((pane, i) => {\r\n            if (i > splitterIndex && i < panesToResize[1]) {\r\n              pane.size = pane.min;\r\n              sums.nextReachedMinPanes += pane.min;\r\n            }\r\n          });\r\n        }\r\n        sums.nextPanesSize = this.sumNextPanesSize(panesToResize[1] - 1);\r\n        // If nothing else to push up, cancel dragging.\r\n        if (panesToResize[1] === undefined) {\r\n          sums.nextReachedMinPanes = 0;\r\n          this.panes[this.panes.length - 1].size = this.panes[\r\n            this.panes.length - 1\r\n          ].min;\r\n          this.panes.forEach((pane, i) => {\r\n            if (i < this.panes.length - 1 && i >= splitterIndex + 1) {\r\n              pane.size = pane.min;\r\n              sums.nextReachedMinPanes += pane.min;\r\n            }\r\n          });\r\n          this.panes[panesToResize[0]].size =\r\n            100 -\r\n            sums.prevPanesSize -\r\n            sums.nextReachedMinPanes -\r\n            this.panes[this.panes.length - 1].min -\r\n            sums.nextPanesSize;\r\n          return null;\r\n        }\r\n      }\r\n      return { sums, panesToResize };\r\n    },\r\n    sumPrevPanesSize(splitterIndex) {\r\n      return this.panes.reduce(\r\n        (total, pane, i) => total + (i < splitterIndex ? pane.size : 0),\r\n        0\r\n      );\r\n    },\r\n    sumNextPanesSize(splitterIndex) {\r\n      return this.panes.reduce(\r\n        (total, pane, i) => total + (i > splitterIndex + 1 ? pane.size : 0),\r\n        0\r\n      );\r\n    },\r\n    // Return the previous pane from siblings which has a size (width for vert or height for horz) of more than 0.\r\n    findPrevExpandedPane(splitterIndex) {\r\n      const pane = [...this.panes]\r\n        .reverse()\r\n        .find(p => p.index < splitterIndex && p.size > p.min);\r\n      return pane || {};\r\n    },\r\n    // Return the next pane from siblings which has a size (width for vert or height for horz) of more than 0.\r\n    findNextExpandedPane(splitterIndex) {\r\n      const pane = this.panes.find(\r\n        p => p.index > splitterIndex + 1 && p.size > p.min\r\n      );\r\n      return pane || {};\r\n    },\r\n    // Called when the component is mounted and updated: update the panes and splitter as needed.\r\n    update() {\r\n      let lastIsPane = false;\r\n      let nbPanes = 0;\r\n      let setPanesSizesToDefault = false;\r\n      // Loop through children: some panes and splitters may have been reused by Vue.js recycling mechanism.\r\n      [...this.container.children].forEach(child => {\r\n        if (child.classList.contains(\"splitpanes__pane\")) {\r\n          // Pane\r\n          const paneIndex = nbPanes;\r\n\r\n          if (lastIsPane) {\r\n            // The previous child is a pane: we need to create a new splitter in between.\r\n            const splitterIndex = paneIndex - 1;\r\n            const elm = document.createElement(\"div\");\r\n            elm.classList.add(\"splitpanes__splitter\");\r\n            elm.setAttribute(\"data-splitpanes-index\", splitterIndex);\r\n            elm.onmousedown = event => this.onMouseDown(event, splitterIndex);\r\n            if (typeof window !== \"undefined\" && \"ontouchstart\" in window) {\r\n              elm.ontouchstart = event =>\r\n                this.onMouseDown(event, splitterIndex);\r\n            }\r\n            elm.onclick = event =>\r\n              this.onSplitterClick(event, splitterIndex + 1);\r\n            if (this.dblClickSplitter) {\r\n              elm.ondblclick = event =>\r\n                this.onSplitterDblClick(event, splitterIndex + 1);\r\n            }\r\n            Object.defineProperty(child, \"before\", {\r\n              configurable: true,\r\n              enumerable: true,\r\n              writable: true,\r\n              value: function before() {\r\n                var argArr = Array.prototype.slice.call(arguments),\r\n                  docFrag = document.createDocumentFragment();\r\n\r\n                argArr.forEach(function(argItem) {\r\n                  var isNode = argItem instanceof Node;\r\n                  docFrag.appendChild(\r\n                    isNode ? argItem : document.createTextNode(String(argItem))\r\n                  );\r\n                });\r\n\r\n                this.parentNode.insertBefore(docFrag, this);\r\n              }\r\n            });\r\n            child.before(elm);\r\n          }\r\n\r\n          lastIsPane = true;\r\n          nbPanes++;\r\n          if (\r\n            child.getAttribute(\"data-splitpanes-index\") === paneIndex.toString()\r\n          ) {\r\n            // The pane has been recycled and is at the correct position: nothing to change.\r\n            return;\r\n          }\r\n\r\n          // Otherwise, update the pane information.\r\n          child.setAttribute(\"id\", `pane_${paneIndex}`);\r\n          child.setAttribute(\"data-splitpanes-index\", paneIndex);\r\n          child.onclick = event => this.onPaneClick(event, paneIndex);\r\n\r\n          // Get pane size.\r\n          const vm = this.$children[paneIndex];\r\n          let size = 0;\r\n          if (!setPanesSizesToDefault) {\r\n            if (typeof vm.size === \"undefined\") {\r\n              // No 'size' prop set, the size will be set to \"100 / nbPanes\" after this loop since we don't know yet how many panes there are.\r\n              setPanesSizesToDefault = true;\r\n            } else {\r\n              // The size is given in prop.\r\n              size = Number.parseFloat(vm.size);\r\n            }\r\n          }\r\n\r\n          // Update `this.panes` with the new pane information.\r\n          this.$set(this.panes, paneIndex, {\r\n            index: paneIndex,\r\n            min:\r\n              typeof vm.minSize === \"undefined\"\r\n                ? 0\r\n                : Number.parseFloat(vm.minSize),\r\n            max:\r\n              typeof vm.maxSize === \"undefined\"\r\n                ? 100\r\n                : Number.parseFloat(vm.maxSize),\r\n            size\r\n          });\r\n        } else {\r\n          // Splitter\r\n          if (!lastIsPane) {\r\n            // The previous child is already a splitter, so we need to remove this one.\r\n            child.onmousedown = undefined;\r\n            child.onclick = undefined;\r\n            child.ondblclick = undefined;\r\n            child.remove();\r\n            return;\r\n          }\r\n\r\n          lastIsPane = false;\r\n          const splitterIndex = nbPanes - 1;\r\n          if (child.hasAttribute(\"data-splitpanes-index\")) {\r\n            if (\r\n              child.getAttribute(\"data-splitpanes-index\") ===\r\n              splitterIndex.toString()\r\n            ) {\r\n              // The splitter is at the correct position: nothing to change.\r\n              return;\r\n            }\r\n            // Otherwise, we'll need to update its information, so let's start by erasing the old ones.\r\n            child.onmousedown = undefined;\r\n            child.onclick = undefined;\r\n            child.ondblclick = undefined;\r\n          }\r\n          // Update the splitter information.\r\n          child.setAttribute(\"data-splitpanes-index\", splitterIndex);\r\n          child.onmousedown = event => this.onMouseDown(event, splitterIndex);\r\n          child.onclick = event => this.onSplitterClick(event, splitterIndex);\r\n          if (this.dblClickSplitter) {\r\n            child.ondblclick = event =>\r\n              this.onSplitterDblClick(event, splitterIndex);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Remove the trailing splitter if any.\r\n      [...this.container.children].reverse().some(child => {\r\n        if (child.classList.contains(\"splitpanes__pane\")) {\r\n          return true;\r\n        }\r\n        if (child.classList.contains(\"splitpanes__splitter\")) {\r\n          child.onmousedown = undefined;\r\n          child.onclick = undefined;\r\n          child.ondblclick = undefined;\r\n          child.remove();\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      if (this.panes.length > nbPanes) {\r\n        // There are less panes than before, so we need to remove the unused ones from `this.panes`.\r\n        this.panes.splice(nbPanes, this.panes.length - nbPanes + 1);\r\n      }\r\n\r\n      if (setPanesSizesToDefault) {\r\n        // If some panes have no `size` prop set, then we compute and set their default size.\r\n        const size = 100 / this.panes.length;\r\n        this.panes.forEach(pane => {\r\n          pane.size = size;\r\n        });\r\n      }\r\n    },\r\n    // Called by pane component on programmatic resize.\r\n    requestUpdate({ target, ...args }) {\r\n      const index = target.$el.getAttribute(\"data-splitpanes-index\");\r\n      const pane = this.panes[index];\r\n      Object.entries(args).forEach(([key, value]) => {\r\n        pane[key] = value;\r\n      });\r\n    }\r\n  },\r\n  updated() {\r\n    this.update();\r\n  },\r\n  mounted() {\r\n    this.container = this.$refs.container;\r\n    this.update();\r\n    this.$emit(\"ready\");\r\n  },\r\n  render(h) {\r\n    return h(\r\n      \"div\",\r\n      {\r\n        ref: \"container\",\r\n        class: [\r\n          \"splitpanes\",\r\n          `splitpanes--${this.horizontal ? \"horizontal\" : \"vertical\"}`,\r\n          {\r\n            \"splitpanes--dragging\": this.touch.dragging\r\n          }\r\n        ]\r\n      },\r\n      this.$slots.default\r\n    );\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.splitpanes {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  &--vertical {\r\n    flex-direction: row;\r\n  }\r\n  &--horizontal {\r\n    flex-direction: column;\r\n  }\r\n  &--dragging * {\r\n    user-select: none;\r\n  }\r\n  &__pane {\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    transition: width 0.2s ease-out, height 0.2s ease-out;\r\n    .splitpanes--dragging & {\r\n      transition: none;\r\n    }\r\n  }\r\n  // Disable default zoom behavior on touch device when double tapping splitter.\r\n  &__splitter {\r\n    touch-action: none;\r\n  }\r\n  &--vertical > .splitpanes__splitter {\r\n    min-width: 1px;\r\n    cursor: col-resize;\r\n  }\r\n  &--horizontal > .splitpanes__splitter {\r\n    min-height: 1px;\r\n    cursor: row-resize;\r\n  }\r\n}\r\n.splitpanes.default-theme {\r\n  .splitpanes__pane {\r\n    background-color: #f2f2f2;\r\n  }\r\n  .splitpanes__splitter {\r\n    background-color: #fff;\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    &:before,\r\n    &:after {\r\n      content: \"\";\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      background-color: rgba(0, 0, 0, 0.15);\r\n      transition: background-color 0.3s;\r\n    }\r\n    &:hover:before,\r\n    &:hover:after {\r\n      background-color: rgba(0, 0, 0, 0.25);\r\n    }\r\n  }\r\n}\r\n.default-theme {\r\n  &.splitpanes .splitpanes .splitpanes__splitter {\r\n    z-index: 1;\r\n  }\r\n  &.splitpanes--vertical > .splitpanes__splitter,\r\n  .splitpanes--vertical > .splitpanes__splitter {\r\n    width: 9px;\r\n    border-left: 1px solid #eee;\r\n    margin-left: -1px;\r\n    &:before,\r\n    &:after {\r\n      transform: translateY(-50%);\r\n      width: 1px;\r\n      height: 30px;\r\n    }\r\n    &:before {\r\n      margin-left: -2px;\r\n    }\r\n    &:after {\r\n      margin-left: 1px;\r\n    }\r\n  }\r\n  &.splitpanes--horizontal > .splitpanes__splitter,\r\n  .splitpanes--horizontal > .splitpanes__splitter {\r\n    height: 9px;\r\n    border-top: 1px solid #eee;\r\n    margin-top: -1px;\r\n    &:before,\r\n    &:after {\r\n      transform: translateX(-50%);\r\n      width: 30px;\r\n      height: 1px;\r\n    }\r\n    &:before {\r\n      margin-top: -2px;\r\n    }\r\n    &:after {\r\n      margin-top: 1px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./splitpanes.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./splitpanes.vue?vue&type=script&lang=js&\"","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","var render, staticRenderFns\nimport script from \"./splitpanes.vue?vue&type=script&lang=js&\"\nexport * from \"./splitpanes.vue?vue&type=script&lang=js&\"\nimport style0 from \"./splitpanes.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default {\r\n  'name': 'pane',\r\n  'props': {\r\n    'size': {\r\n      'type': [Number, String],\r\n      'required': false,\r\n      'default': undefined\r\n    },\r\n    'minSize': {\r\n      'type': [Number, String],\r\n      'required': false,\r\n      'default': 0\r\n    },\r\n    'maxSize': {\r\n      'type': [Number, String],\r\n      'required': false,\r\n      'default': 100\r\n    }\r\n  },\r\n  'data': () => ({\r\n    'style': {}\r\n  }),\r\n  'computed': {\r\n    sizeNumber () {\r\n      return parseFloat(this.size)\r\n    },\r\n    minSizeNumber () {\r\n      return parseFloat(this.minSize)\r\n    },\r\n    maxSizeNumber () {\r\n      return parseFloat(this.maxSize)\r\n    }\r\n  },\r\n  'watch': {\r\n    sizeNumber (size) {\r\n      this.$parent.requestUpdate({\r\n        'target': this,\r\n        size\r\n      })\r\n    },\r\n    minSizeNumber (min) {\r\n      this.$parent.requestUpdate({\r\n        'target': this,\r\n        min\r\n      })\r\n    },\r\n    maxSizeNumber (max) {\r\n      this.$parent.requestUpdate({\r\n        'target': this,\r\n        max\r\n      })\r\n    }\r\n  },\r\n  'methods': {\r\n    update (style) {\r\n      this.style = style\r\n    }\r\n  },\r\n  render (h) {\r\n    return h(\r\n      'div',\r\n      {\r\n        'class': ['splitpanes__pane'],\r\n        'style': this.style\r\n      },\r\n      this.$slots.default\r\n    )\r\n  }\r\n}\r\n","import Splitpanes from './splitpanes'\r\nimport Pane from './pane'\r\n\r\nexport { Splitpanes, Pane }\r\n","import './setPublicPath'\nexport * from '~entry'\n"],"sourceRoot":""}